Index: src/core/actors/Tribe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core.actors;\n\nimport core.TechnologyTree;\nimport core.TribesConfig;\nimport core.Types;\nimport core.actors.units.Unit;\nimport core.game.Board;\nimport core.game.Game;\nimport core.game.GameState;\nimport utils.Vector2d;\nimport utils.graph.PathNode;\nimport utils.graph.Pathfinder;\nimport java.util.ArrayList;\n\nimport java.util.LinkedList;\nimport java.util.HashMap;\nimport java.util.Random;\n\nimport static core.Types.BUILDING.*;\n\n\npublic class Tribe extends Actor {\n\n    //Cities this tribe owns.\n    private ArrayList<Integer> citiesID;\n\n    //Capital City ID\n    private int capitalID;\n\n    //Type of the tribe\n    private Types.TRIBE tribe;\n\n    //Technology progress of this tribe\n    private TechnologyTree techTree;\n\n    //Current number of stars (resources) of this tribe.\n    private int stars;\n\n    //Game result for this player.\n    private Types.RESULT winner = Types.RESULT.INCOMPLETE;\n\n    //Score for the tribe.\n    private int score = 0;\n\n    //Indicates if the position in the board is visible\n    private boolean[][] obsGrid;\n\n    //List of city ids connected to the capital (capital not included)\n    private ArrayList<Integer> connectedCities = new ArrayList<>();\n\n    //Monument availability\n    private HashMap<Types.BUILDING, MONUMENT_STATUS> monuments;\n\n    //Tribes met by this tribe.\n    private ArrayList<Integer> tribesMet;\n\n    //Units that don't belong to a city (either converted of shifted).\n    private ArrayList<Integer> extraUnits;\n\n    //Kills by this tribe\n    private int nKills;\n\n    //Turns since the last attack of this tribe if Meditation is reseached.\n    private int nPacifistCount;\n\n    public Tribe(Types.TRIBE tribe) {\n        this.tribe = tribe;\n        init();\n    }\n\n    public Tribe(int tribeID, int cityID, Types.TRIBE tribe) {\n        this.tribeId = tribeID;\n        citiesID = new ArrayList<>();\n        citiesID.add(cityID);\n        this.tribe = tribe;\n        init();\n    }\n\n    private void init() {\n        techTree = new TechnologyTree();\n        techTree.doResearch(tribe.getInitialTech());\n        citiesID = new ArrayList<>();\n        stars = TribesConfig.INITIAL_STARS;\n        score = tribe.getInitialScore();\n        tribesMet = new ArrayList<>();\n        extraUnits = new ArrayList<>();\n        connectedCities = new ArrayList<>();\n        monuments = Types.BUILDING.initMonuments();\n        nKills = 0;\n        nPacifistCount = 0;\n    }\n\n    public void initObsGrid(int size) {\n        obsGrid = new boolean[size][size];\n    }\n\n\n    public Tribe copy() {\n        Tribe tribeCopy = new Tribe(this.tribe);\n        tribeCopy.actorId = this.actorId;\n        tribeCopy.tribeId = this.tribeId;\n        tribeCopy.stars = this.stars;\n        tribeCopy.winner = this.winner;\n        tribeCopy.score = this.score;\n        tribeCopy.capitalID = this.capitalID;\n        tribeCopy.nKills = this.nKills;\n        tribeCopy.nPacifistCount = this.nPacifistCount;\n\n        tribeCopy.techTree = this.techTree.copy();\n\n        tribeCopy.obsGrid = new boolean[obsGrid.length][obsGrid.length];\n        for (int i = 0; i < obsGrid.length; ++i)\n            System.arraycopy(obsGrid[i], 0, tribeCopy.obsGrid[i], 0, obsGrid.length);\n\n        tribeCopy.citiesID = new ArrayList<>();\n        tribeCopy.citiesID.addAll(citiesID);\n\n        tribeCopy.connectedCities = new ArrayList<>();\n        tribeCopy.connectedCities.addAll(connectedCities);\n\n        tribeCopy.tribesMet = new ArrayList<>();\n        tribeCopy.tribesMet.addAll(tribesMet);\n\n        tribeCopy.extraUnits = new ArrayList<>();\n        tribeCopy.extraUnits.addAll(extraUnits);\n\n        tribeCopy.monuments = new HashMap<>();\n        for(Types.BUILDING b : monuments.keySet())\n        {\n            tribeCopy.monuments.put(b, monuments.get(b));\n        }\n\n        return tribeCopy;\n    }\n\n    public void clearView(int x, int y, int range, Random r, Board b) {\n        int size = obsGrid.length;\n        Vector2d center = new Vector2d(x, y);\n\n        LinkedList<Vector2d> tiles = center.neighborhood(range, 0, size);\n        tiles.add(center);\n\n        for(Vector2d tile : tiles)\n        {\n            if (!obsGrid[tile.x][tile.y]) {\n                obsGrid[tile.x][tile.y] = true;\n                this.score += TribesConfig.CLEAR_VIEW_POINTS;\n                Unit u = b.getUnitAt(tile.x,tile.y);\n                City c = b.getCityInBorders(tile.x,tile.y);\n                if( u !=null){\n                    meetTribe(r,b.getTribes(),u.getTribeId());\n                }else if(c !=null){\n                    meetTribe(r,b.getTribes(),c.getTribeId());\n                }\n            }\n        }\n\n        //We may be clearing the last tiles of the board, which grants a monument\n        if(monuments.get(EYE_OF_GOD) == MONUMENT_STATUS.UNAVAILABLE)\n        {\n            for(int i = 0; i < obsGrid.length; ++i)\n                for(int j = 0; j < obsGrid[0].length; ++j)\n                {\n                    if(!obsGrid[i][j]) return;\n                }\n\n            //All clear and we couldn't buy monument before. Now we can.\n            monuments.put(EYE_OF_GOD, MONUMENT_STATUS.AVAILABLE);\n        }\n    }\n\n\n    public void addCity(int id) {\n        citiesID.add(id);\n    }\n\n    public void removeCity(int id) {\n        for (int i = 0; i < citiesID.size(); i++) {\n            if (citiesID.get(i) == id) {\n                citiesID.remove(i);\n                return;\n            }\n        }\n        System.out.println(\"Error!! city ID \" + id + \" does not belong to this tribe\");\n    }\n\n    public void setTechTree(TechnologyTree techTree) {\n        this.techTree = techTree;\n    }\n\n    public TechnologyTree getTechTree() {\n        return techTree;\n    }\n\n    public Types.TECHNOLOGY getInitialTechnology() {\n        return tribe.getInitialTech();\n    }\n\n    public void addScore(int score) {\n        this.score += score;\n    }\n\n    public void subtractScore(int score) {\n        this.score -= score;\n    }\n\n    public ArrayList<Integer> getCitiesID() {\n        return citiesID;\n    }\n\n    public String getName() {\n        return tribe.getName();\n    }\n\n    public boolean[][] getObsGrid() {\n        return obsGrid;\n    }\n\n    public boolean isVisible(int x, int y) {\n        return obsGrid[x][y];\n    }\n\n    public Types.TRIBE getType() {\n        return tribe;\n    }\n\n    public Types.RESULT getWinner() {\n        return winner;\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public int getReverseScore() {\n        return -score;\n    }\n\n    public void setScore(int score) {\n        this.score = score;\n    }\n\n    public int getStars() {\n        return stars;\n    }\n\n    public void setStars(int stars) {\n        this.stars = stars;\n    }\n\n    public void addStars(int stars) {\n        this.stars += stars;\n\n        if(this.stars >= TribesConfig.EMPERORS_TOMB_STARS && monuments.get(Types.BUILDING.EMPERORS_TOMB) == MONUMENT_STATUS.UNAVAILABLE)\n            monuments.put(EMPERORS_TOMB, MONUMENT_STATUS.AVAILABLE);\n    }\n\n    public void subtractStars(int stars) {\n        this.stars -= stars;\n    }\n\n    public void setCapitalID(int capitalID) {\n        this.capitalID = capitalID;\n    }\n\n    public int getCapitalID() {\n        return capitalID;\n    }\n\n    public void setPosition(int x, int y) {\n        position = null;\n    } //this doesn't make sense\n\n    public Vector2d getPosition() {\n        return null;\n    }\n\n    public void moveAllUnits(ArrayList<Integer> units){\n        extraUnits.addAll(units);\n    }\n\n    public boolean isMonumentBuildable(Types.BUILDING building)\n    {\n        return monuments.get(building) == MONUMENT_STATUS.AVAILABLE;\n    }\n\n    public void monumentIsBuilt(Types.BUILDING building)\n\n    {\n        monuments.put(building, MONUMENT_STATUS.BUILT);\n    }\n\n    public int getnumKills() {\n        return nKills;\n    }\n\n    public void addKill() {\n        this.nKills++;\n\n        //we may have a new monument availability here\n        if(this.nKills >= TribesConfig.GATE_OF_POWER_KILLS && monuments.get(GATE_OF_POWER) == MONUMENT_STATUS.UNAVAILABLE)\n            monuments.put(GATE_OF_POWER, MONUMENT_STATUS.AVAILABLE);\n    }\n\n    public ArrayList<Integer> getTribesMet() {\n        return tribesMet;\n    }\n\n    public void meetTribe(Random r, Tribe[] tribes, int tribeID) {\n\n\n        boolean[] inMetTribes = new boolean[tribes.length];\n\n\n        for (int i = 0; i < tribesMet.size(); i++) {\n            // if tribes not in tribes met or tribe is itself then do nothing else add to tribesmet arraylist\n            if (tribesMet.size() >= i && tribesMet.size() != 0) {\n                if (tribeID == this.getTribeId()) {\n                    inMetTribes[tribeID] = true;\n                }\n            }\n        }\n            if (!inMetTribes[tribeID]) {\n                tribesMet.add(tribeID); // add to this tribe\n                tribes[tribeID].tribesMet.add(this.getTribeId()); // add to met tribe as well\n\n                //Pick a technology at random from the tribe to learn\n                TechnologyTree thisTribeTree = getTechTree();\n                TechnologyTree metTribeTree = tribes[tribeID].getTechTree();\n                ArrayList<Types.TECHNOLOGY> techInThisTribe = new ArrayList<>(); //Check which tech in this tribe\n                ArrayList<Types.TECHNOLOGY> techInMetTribe = new ArrayList<>(); // Check which tech in met tribe\n                //Check which technologies both research trees contain\n\n                for (Types.TECHNOLOGY tech : Types.TECHNOLOGY.values()\n                ) {\n                    if (thisTribeTree.isResearched(tech))\n                        techInThisTribe.add(tech);\n                    if (metTribeTree.isResearched(tech))\n                        techInMetTribe.add(tech);\n                }\n                ArrayList<Types.TECHNOLOGY> potentialTechForThisTribe = new ArrayList<>();\n                ArrayList<Types.TECHNOLOGY> potentialTechForMetTribe = new ArrayList<>();\n\n                for (int x = 0; x < techInMetTribe.size(); x++) {\n                    if (!thisTribeTree.isResearched(techInMetTribe.get(x)))\n                        potentialTechForThisTribe.add(techInMetTribe.get(x));\n                }\n\n                for (int x = 0; x < techInThisTribe.size(); x++) {\n                    if (!metTribeTree.isResearched(techInThisTribe.get(x)))\n                        potentialTechForMetTribe.add(techInThisTribe.get(x));\n                }\n\n\n                if (potentialTechForThisTribe.size() == 0 || potentialTechForMetTribe.size() == 0)\n                    return;\n\n                Types.TECHNOLOGY techToGet = potentialTechForThisTribe.get(r.nextInt(potentialTechForThisTribe.size()));\n                thisTribeTree.doResearch(techToGet);\n\n                techToGet = potentialTechForMetTribe.get(r.nextInt(potentialTechForMetTribe.size()));\n                metTribeTree.doResearch(techToGet);\n            }\n        }\n\n\n\n    public void updateNetwork(Pathfinder tp, Board b, boolean thisTribesTurn) {\n        ArrayList<Integer> lostCities = new ArrayList<>();\n        ArrayList<Integer> addedCities = new ArrayList<>();\n\n        //We need to start from the capital. If capital is not owned, there's no trade network\n        if (!controlsCapital()) {\n\n            lostCities.addAll(connectedCities);\n            connectedCities.clear();\n\n        } else if (tp != null) {\n\n            City capital = (City) b.getActor(capitalID);\n\n            for (int cityId : citiesID) {\n                if (cityId != capitalID) {\n\n                    //Check if the city is connected to the capital\n                    City nonCapitalCity = (City) b.getActor(cityId);\n                    Vector2d nonCapitalPos = nonCapitalCity.getPosition();\n                    ArrayList<PathNode> pathToCity = tp.findPathTo(nonCapitalPos);\n\n                    boolean connectedNow = (pathToCity != null) && (pathToCity.size() > 0);\n\n                    //This was previously connected\n                    if (connectedCities.contains(cityId)) {\n                        if (!connectedNow) {\n                            //drops from the network\n                            dropCityFromNetwork(nonCapitalCity);\n                            lostCities.add(cityId);\n                        }\n                    } else if (connectedNow) {\n                        //Wasn't connected, but it is now\n                        connectedCities.add(cityId);\n                        addedCities.add(cityId);\n                    }\n                }\n            }\n\n            //There may be some connected cities that we don't longer own\n            // (i.e. we're here because an enemy captured one of our cities in the network)\n            ArrayList<Integer> connCities = new ArrayList<>(connectedCities);\n            for(Integer cityId : connCities)\n            {\n                if(!this.controlsCity(cityId))\n                {\n                    dropCityFromNetwork((City) b.getActor(cityId));\n                    lostCities.add(cityId);\n                }\n            }\n\n\n            //The capital gains 1 population for each city connected, -1 for each city disconnected\n            int capitalGain = addedCities.size() - lostCities.size();\n            capital.addPopulation(this, capitalGain);\n\n            //We may be adding a new monument to the pool!\n            if(connectedCities.size() >= TribesConfig.GRAND_BAZAR_CITIES && monuments.get(GRAND_BAZAR) == MONUMENT_STATUS.UNAVAILABLE) {\n                monuments.put(GRAND_BAZAR, MONUMENT_STATUS.AVAILABLE);\n            }\n        }\n\n\n        //Population adjustments: they only happen if it's this tribe's turn\n        if (thisTribesTurn) {\n\n            //All cities that lost connection with the capital lose 1 population\n//            for (int cityId : lostCities) {\n//                City nonCapitalCity = (City) b.getActor(cityId);\n//                nonCapitalCity.addPopulation(this, -1);\n//            }\n\n            //All cities that gained connection with the capital gain 1 population.\n            for (int cityId : addedCities) {\n                City nonCapitalCity = (City) b.getActor(cityId);\n                nonCapitalCity.addPopulation(this, 1);\n            }\n        }\n    }\n\n    /**\n     * Drops a city from the network. Removes the associated population required to that city.\n     * @param lostCity city to remove from network\n     */\n    private void dropCityFromNetwork(City lostCity)\n    {\n        int cityId = lostCity.getActorId();\n        int cityIdx = connectedCities.indexOf(cityId);\n        connectedCities.remove(cityIdx);\n\n        //this city loses 1 population\n        lostCity.addPopulation(this, -1);\n    }\n\n    public int getMaxProduction(GameState gs)\n    {\n        int acumProd = 0;\n        for (int cityId : citiesID) {\n            City city = (City) gs.getActor(cityId);\n            acumProd += city.getProduction();\n        }\n        return acumProd;\n    }\n\n\n    public boolean controlsCapital() {\n        return citiesID.contains(capitalID);\n    }\n\n    public boolean controlsCity(int cityId)\n    {\n        return citiesID.contains(cityId);\n    }\n\n    public int getNumCities()\n    {\n        return citiesID.size();\n    }\n\n    public void cityMaxedUp() {\n        if(monuments.get(PARK_OF_FORTUNE) == MONUMENT_STATUS.UNAVAILABLE)\n            monuments.put(PARK_OF_FORTUNE, MONUMENT_STATUS.AVAILABLE);\n    }\n\n    public void allResearched() {\n        if(monuments.get(TOWER_OF_WISDOM) == MONUMENT_STATUS.UNAVAILABLE)\n            monuments.put(TOWER_OF_WISDOM, MONUMENT_STATUS.AVAILABLE);\n    }\n\n    public void addExtraUnit(Unit target)\n    {\n        extraUnits.add(target.getActorId());\n        target.setCityId(-1);\n    }\n\n    public void removeExtraUnit(Unit target)\n    {\n        int index = extraUnits.indexOf(target.getActorId());\n        if(index != -1)\n            extraUnits.remove(index);\n    }\n\n    /**\n     * Checks if the tribe can build roads\n     * @return if tribe can build roads\n     */\n    public boolean canBuildRoads() {\n        //Factors for tree building in general: tech and enough stars.\n        boolean canBuildRoad = techTree.isResearched(Types.TECHNOLOGY.ROADS);\n        boolean hasMoney = stars >= TribesConfig.ROAD_COST;\n        return canBuildRoad && hasMoney;\n    }\n\n    public void capturedCity(GameState gameState, City captured)\n    {\n        this.addCity(captured.getActorId());\n        captured.setTribeId(actorId);\n\n        //manage production and population of this new city (and others!)\n        for(Building building : captured.getBuildings())\n        {\n            captured.updateBuildingEffects(gameState, building, false, true);\n        }\n    }\n\n    public void lostCity(GameState gameState, City lostCity)\n    {\n        this.removeCity(lostCity.getActorId());\n        //manage the effect of losing this in the production and population of other cities.\n\n        //manage production and population of this new city (and others!)\n        for(Building building : lostCity.getBuildings())\n        {\n            if(building.type.isBase() || building.type == Types.BUILDING.PORT)\n            {\n                lostCity.updateBuildingEffects(gameState, building, true, true);\n            }\n        }\n\n    }\n\n    public ArrayList<Integer> getExtraUnits() {\n        return extraUnits;\n    }\n\n    public void addPacifistCount() {\n        if(techTree.isResearched(Types.TECHNOLOGY.MEDITATION))\n        {\n            nPacifistCount++;\n            if(nPacifistCount == TribesConfig.ALTAR_OF_PEACE_TURNS)\n            {\n                monuments.put(ALTAR_OF_PEACE, MONUMENT_STATUS.AVAILABLE);\n            }\n        }\n    }\n\n    public void resetPacifistCount() {nPacifistCount = 0;}\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/core/actors/Tribe.java	(revision fd7729f6ac4bb2f60b6efb7c0ad9b76799ea6b9c)
+++ src/core/actors/Tribe.java	(date 1586948322895)
@@ -148,9 +148,9 @@
                 Unit u = b.getUnitAt(tile.x,tile.y);
                 City c = b.getCityInBorders(tile.x,tile.y);
                 if( u !=null){
-                    meetTribe(r,b.getTribes(),u.getTribeId());
+                    meetTribe(r,b.getTribes(),u.getTribeId(), false);
                 }else if(c !=null){
-                    meetTribe(r,b.getTribes(),c.getTribeId());
+                    meetTribe(r,b.getTribes(),c.getTribeId(),false);
                 }
             }
         }
@@ -306,21 +306,19 @@
         return tribesMet;
     }
 
-    public void meetTribe(Random r, Tribe[] tribes, int tribeID) {
+    public void meetTribe(Random r, Tribe[] tribes, int tribeID, boolean meetingEachOther) {
 
 
-        boolean[] inMetTribes = new boolean[tribes.length];
+       // boolean[] inMetTribes = new boolean[tribes.length];
 
 
         for (int i = 0; i < tribesMet.size(); i++) {
             // if tribes not in tribes met or tribe is itself then do nothing else add to tribesmet arraylist
-            if (tribesMet.size() >= i && tribesMet.size() != 0) {
-                if (tribeID == this.getTribeId()) {
-                    inMetTribes[tribeID] = true;
-                }
+                if (tribeID == this.tribesMet.get(i) || tribeID == this.getTribeId()) {
+                    return;
+
             }
         }
-            if (!inMetTribes[tribeID]) {
                 tribesMet.add(tribeID); // add to this tribe
                 tribes[tribeID].tribesMet.add(this.getTribeId()); // add to met tribe as well
 
@@ -360,7 +358,7 @@
 
                 techToGet = potentialTechForMetTribe.get(r.nextInt(potentialTechForMetTribe.size()));
                 metTribeTree.doResearch(techToGet);
-            }
+
         }
 
 
